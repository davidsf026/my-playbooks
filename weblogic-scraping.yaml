---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: Adding localhost
      add_host:
        hostname: "{{ item }}"
        groups: weblogic
      loop: "{{ guestname }}"

- hosts: weblogic
  gather_facts: false
  tasks:
    - name: Executar script de coleta de informações do WebLogic
      shell: |
        #!/bin/bash
        domain_home=$(cat /home/david/workdir/ssm/ps.txt |grep nodemanager | grep -o "Dweblogic.RootDirectory=.*" | cut -d "=" -f 2 | sed 's/ -.*//g' | grep /)
        config_xml=$(cat "$domain_home"/config/config.xml)
        jdbc_xml=$(cat "$domain_home"/config/jdbc/*jdbc*.xml)
        domain_version=$(echo "$config_xml" | grep -oE '<domain-version>[^<]+</domain-version>' | sed -E 's/<\/?domain-version>//g')
        machines=$(echo "$config_xml" | grep -o '<machine>[^<]*</machine>' | sed -E 's/<machine>([^<]+)<\/machine>/\1/' | awk '!seen[$0]++' | grep -vE '^ *$' | tr '\n' ',' | sed 's/,$//')
        datasources=$(echo "$jdbc_xml" | grep -o '<url>[^<]*</url>' | grep jdbc | sed -E 's/<url>([^<]+)<\/url>/\1/' | awk '!seen[$0]++' | grep -vE '^ *$' | tr '\n' ',' | sed 's/,$//')
        header="host,domain-version,machines,datasources"
        output="$(hostname),$domain_version,\"$machines\",\"$datasources\""
        echo "$header"
        echo "$output"
      register: script_output

    - name: Concatenar saídas do script de coleta de informações do WebLogic
      set_fact:
        all_output: "{{ all_output|default([]) + script_output.stdout_lines }}"

- hosts: localhost
  gather_facts: false
  tasks:
    - name: Enviar e-mail com a saída da coleta de informações do WebLogic
      mail:
        host: "smtp.gmail.com"
        port: "587"
        username: "seu_email@gmail.com"
        password: "sua_senha"
        to:
          - "destinatario1@example.com"
          - "destinatario2@example.com"
        subject: "Saída da coleta de informações do WebLogic"
        body: "{{ all_output }}"
      async: 180
      poll: 0
      when: all_output is defined

    - name: Aguardar conclusão da execução em todos os hosts
      async_status:
        jid: "{{ item.ansible_job_id }}"
      with_items: "{{ ansible_play_batch }}"
      loop_control:
        label: "{{ item }}"
      register: job_result
      when: all_output
